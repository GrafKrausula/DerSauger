import struct
import sys
import threading
import _thread
import urllib.request
import shutil
from shutil import copyfile
import queue
import time
import traceback
import json
import os
import pathlib
from pathlib import Path
import zipfile
from zipfile import ZipFile
import subprocess
from subprocess import Popen, PIPE
from os import walk
import os, shutil, glob
from subprocess import Popen, CREATE_NEW_CONSOLE



# Get the absolute path of the current script's directory
# Example: If script is at C:\MyApp\nativeMessaging\native-messaging-example-host.py
# Then script_dir will be C:\MyApp
script_dir = os.path.dirname(os.path.abspath(__file__))

# Configure paths to Python interpreters in virtual environments
# Relative paths go up one level (..) from host directory
PYTHON39_VENV_PATH_RELATIVE = "..\\python39_venv\\Scripts\\python.exe"
PYTHON39_VENV_PATH_ABSOLUTE = os.path.normpath(os.path.join(script_dir, PYTHON39_VENV_PATH_RELATIVE))
# Example resolved absolute path: C:\MyApp\python39_venv\Scripts\python.exe

PACKAGES_VENV_PATH_RELATIVE = "..\\packages_venv\\Scripts\\python.exe"
PACKAGES_VENV_PATH_ABSOLUTE = os.path.normpath(os.path.join(script_dir, PACKAGES_VENV_PATH_RELATIVE))
# Example resolved absolute path: C:\MyApp\packages_venv\Scripts\python.exe

# Verify paths exist
if not os.path.exists(PYTHON39_VENV_PATH_ABSOLUTE):
    raise FileNotFoundError(f"Python 3.9 interpreter not found at: {PYTHON39_VENV_PATH_ABSOLUTE}")

if not os.path.exists(PACKAGES_VENV_PATH_ABSOLUTE):
    raise FileNotFoundError(f"Packages venv interpreter not found at: {PACKAGES_VENV_PATH_ABSOLUTE}")



# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
  import os, msvcrt
  msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
  msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

def makedir(convertpath,new_fldr_name):

    new_fldr_name = new_fldr_name.upper()

    new_fldr = f'{convertpath}\{new_fldr_name}'
    #print(new_fldr)

    try:
      os.makedirs(new_fldr) ## it creates the destination folder in capslock
    except:
      send_message('{"Info": current_thread: %s}' % new_fldr_name)

    return new_fldr

def is_main_thread():
    if threading.current_thread() is threading.main_thread():
        send_message('{"Info": current_thread is main thread}')
        return True
    else:
        send_message('{"Info": current_thread is NOT the main thread}')
        send_message('{"Info": current_thread: %s}' % threading.current_thread().ident)
        return False

def create_crashlog(message):

    path = os.path.expanduser("~\\Documents\\DerSauger_LOG.txt")
    send_message('{"Info": Crashlog Path: %s}' % path)
    log_file = open(path, "a")
    log_file.write(message)
    log_file.write("\n\n")
    log_file.close()
    return

def write_log(message):

    path = os.path.expanduser("~\\Documents\\DerSauger_LOG.txt")
    #send_message('{"Info": Log Path: %s}' % path)
    log_file = open(path, "a")
    log_file.write(message)
    log_file.write("\n\n")
    log_file.close()
    return

def get_size(folder_path):
    return sum(entry.stat().st_size for entry in os.scandir(folder_path))

def getScriptPath():

    return getConvertScriptPath()

def getConvertScriptPath():

    scriptpath = str(pathlib.Path(__file__).parent.absolute())
    convertscriptpath = scriptpath.replace(r"\nativeMessaging\host\host","")
    return convertscriptpath

def wavingTheVids(format,downloadpath,convertpath):

    convertscriptpath = getConvertScriptPath()
    format = format.lower() #format muss kleingeschrieben sein

    send_message('{"Info": Waving All Vids %s}' % len(cmd_threads))
    openScriptCmd = f'cmd /c "cd /d "{convertscriptpath}"'
    openScriptCmd +=f' && "{PYTHON39_VENV_PATH_ABSOLUTE}" WAVing_All_VIDS.py noinput "{convertpath}" "{downloadpath}" "{format}"' #noinput = script will close after finishing
    openScriptCmd += ' " '
    send_message('{"openScriptCmd": %s}' % openScriptCmd)
    process = subprocess.Popen(openScriptCmd, creationflags=CREATE_NEW_CONSOLE)
    return

def createdownloadcmd(url,downloadpath):

    downloadcmd = f'cmd /c "cd /d "{downloadpath}"' #/k window stays /c window dies
    downloadcmd+= f" && {PACKAGES_VENV_PATH_ABSOLUTE} -m yt-dlp -f bestvideo+bestaudio/best {url}"
    downloadcmd+= ' " '
    send_message('{"cmd": %s}' % downloadcmd)
    return downloadcmd

def byte_to_megabyte(byte_size): #calcs an byte int to megabyte it, just for reading comprehension
    return byte_size / 1024**2


def downloadFiles_host(url,format,convert,downloadpath,convertpath):

    for i in range(10):
        if downloadConvertFiles(url,format,convert,downloadpath,convertpath) == True:
            sys.exit(0)
            return

def downloadConvertFiles(url,format,convert,downloadpath,convertpath): #auslagern in seperaten thread pro aufruf
    #os.system(f"start %s" %createdownloadcmd(url))

    size_pre_download = get_size(downloadpath)

    send_message('{"Info": size_pre_download: %s}' % byte_to_megabyte(size_pre_download))

    process = subprocess.Popen(createdownloadcmd(url,downloadpath), creationflags=CREATE_NEW_CONSOLE)

    process.poll()
    process.wait()

    ###downloadgrößen check

    size_post_download = get_size(downloadpath)
    send_message('{"Info": size_post_download: %s}' % byte_to_megabyte(size_post_download))

    if size_post_download == size_pre_download:
        send_message('{"Info": Nothing got downloaded}')
        return False

    download_size = (size_post_download-size_pre_download)

    send_message('{"Info": Download Size: %s}' % byte_to_megabyte(download_size))
    #WHier muss threadabfrage der variable für cmd threads sprich threads stattfinden
    #Ist dieser der letzte offene thread in der liste wird wavingthevids aufgerufen
    send_message('{"Info": Active Threads after download: %s}' % len(cmd_threads))
    send_message('{"Info": Threadcontent: %s}' % cmd_threads)
    active_count = count_active_cmd_threads()
    send_message('{"Info": ActiveCount: %s}' % active_count)
    if active_count == 1:
        if convert == "true": wavingTheVids(format,downloadpath,convertpath)

    return True

def count_all_threads():
    i = 0
    for thread in threading.enumerate():
        i += 1
    return i

def get_all_threads_in_list():
    all_threads = []
    for thread in threading.enumerate():
        all_threads.append(thread)
    return all_threads

def count_active_cmd_threads():

    active = 0
    for t in cmd_threads:
        if t.is_alive() == True:
            active += 1
    return active

def slicer(my_str,sub):
    index=my_str.find(sub)
    if index !=-1 :
          return my_str[index:]
    else :
          raise Exception('Sub string not found!')

# Helper function that sends a message to the webapp.
def send_message(message):

  write_log(message)
  # encodes content to
  encodedContent = json.dumps(message)
  #encodes length to 4byte Datastructure
  encodedLength = struct.pack('@I', len(encodedContent))
  encodedMessage = {'length': encodedLength, 'content': encodedContent}
  sys.stdout.buffer.write(encodedMessage['length'])
  sys.stdout.write(encodedMessage['content'])
  sys.stdout.flush()

# Thread that reads messages from the webapp.
def read_thread_func(queue):
  message_number = 0

  while 1:

    # Reads the first 4 bytes of the message (which designates message length).
    text_length_bytes = sys.stdin.buffer.read(4)

    #+ send_message('{"dbug": "stdin %s"}' % text_length_bytes)

    if len(text_length_bytes) == 0:
      if queue:
        queue.put(None)
      sys.exit(0)

    # Unpacks the first 4 bytes that are the message length. [0] required because unpack returns tuple with required data at index 0.
    text_length = struct.unpack("i", text_length_bytes)[0]

    # Reads and decodes the text (which is JSON) of the message.
    text_decoded = sys.stdin.buffer.read(text_length).decode("utf-8")
    # Converts the message string into a dictionary.
    text_dict = json.loads(text_decoded)

    if queue:
      queue.put(text_dict)
    else:
      # In headless mode just send an echo message back.
      send_message('{"echo": %s}' % text_dict)

def fetch_online_version(url):
    try:
        with urllib.request.urlopen(url) as response:
            return response.read().decode('utf-8').strip()
    except Exception as e:
        send_message('{"Error fetching online version: %s"}' %e)
        return None

def read_local_version(file_path):
    try:
        with open(file_path, 'r') as file:
            return file.read().strip()
    except FileNotFoundError:
        send_message('{"Error": "Local version file not found."}')
    except Exception as e:
        send_message('{"Error reading local version: %s"}' %e)
    return None

def startUpdater():
    send_message('{"Info": startUpdater() started}')

    # Extend functionality to update youtube-dl
    try:
        update_youtube_dl()
    except Exception as e:
        send_message('{"Error in update function: %s"}' %e)
        create_crashlog('Error in update function: %s\n%s' %(e, traceback.format_exc()))

    try:

        local_version_path = os.path.join(getScriptPath(), 'version.txt')
        send_message('{"Info": local_version_path = %s}' %local_version_path)
        online_version_url = 'https://raw.githubusercontent.com/GrafKrausula/DerSauger/main/Der%20Sauger/version.txt'

        local_version = read_local_version(local_version_path)
        if local_version is None:
            send_message('{"Info": "Local version is None, update will proceed."}')

        online_version = fetch_online_version(online_version_url)
        if online_version is None:
            send_message('{"Info": "Online version is None, update cannot proceed."}')
            return

        if local_version != online_version:
            send_message('{"Info": "local_version %s does not match with online_version %s , starting update..."}' % (local_version, online_version))
            send_message('{"Info": "versions do not match, update needed, proceeding.."}')
        else:
            send_message('{"Info": "local_version %s matches with online_version %s , not updating..."}' % (local_version, online_version))
            send_message('{"Info": "versions match, no update needed."}')
            return True

    except Exception as e:
        send_message('{"Error in update function: %s"}' %e)
        create_crashlog('Error in update function: %s\n%s' %(e, traceback.format_exc()))

    updatercopy_path = copyUpdater()
    send_message('{"Info": startUpdater() updatercopy_path: %s}' % updatercopy_path)

    os.chdir('/')
    os.startfile(updatercopy_path)
    os.chdir('/')


    send_message('{"Info": os.system(updatercopy_path) started}')
    #verschiebt den updater aus diesem ordner in den überordner


    return True

'''
def startUpdater():
    send_message('{"Info": startUpdater() started}')

    # Extend functionality to update youtube-dl
    update_youtube_dl()

    send_message('{"Info": local_version_path = %s}' %local_version_path)
    local_version_path = os.path.join(getScriptPath(), 'Der Sauger', 'version.txt')
    #local_version_path = local_version_path.replace("\Der Sauger","")
    send_message('{"Info": local_version_path = %s}' %local_version_path)
    online_version_url = 'https://raw.githubusercontent.com/GrafKrausula/DerSauger/main/Der%20Sauger/version.txt'

    try:
        local_version = read_local_version(local_version_path)
        if local_version is None:
            send_message('{"Info": "Local version is None, update will proceed."}')

        online_version = fetch_online_version(online_version_url)
        if online_version is None:
            send_message('{"Info": "Online version is None, update cannot proceed."}')
            return

        if local_version != online_version:
            send_message('{"Info": "versions do not match, starting update..."}')
            send_message('{"Info": "local_version %s does not match with online_version %s , starting update..."}' %local_version, %online_version)
        else:
            send_message('{"Info": "versions match, no update needed."}')

    except Exception as e:
        send_message('{"Error in update function: %s"}' %e)
        create_crashlog('Error in update function: %s\n%s' %e %traceback.format_exc())


    updatercopy_path = copyUpdater()
    send_message('{"Info": startUpdater() updatercopy_path: %s}' % updatercopy_path)

    os.chdir('/')
    os.startfile(updatercopy_path)
    os.chdir('/')


    send_message('{"Info": os.system(updatercopy_path) started}')
    #verschiebt den updater aus diesem ordner in den überordner




    return True
'''

def copyUpdater():
    send_message('{"Info": copyUpdater() started}' )

    script_dir = getScriptPath()
    scriptparent_path = script_dir.replace("\Der Sauger","")

    updater_path = f'{script_dir}\Sauger_Updater.py'

    send_message('{"Info": updater_path: %s}' % updater_path)
    send_message('{"Info": scriptparent_path: %s}' % scriptparent_path)

    shutil.copy(updater_path, scriptparent_path)

    new_updater_path = f'{scriptparent_path}\Sauger_Updater.py'

    return new_updater_path

def update_youtube_dl():
    send_message('{"Info": Starting youtube-dl update}')
    try:
        process = subprocess.Popen("PYTHONNEWBINARYPATH_absolute -m yt-dlp -U", creationflags=CREATE_NEW_CONSOLE)
        process.poll()
        process.wait()
        if process.returncode == 0:
            send_message('{"Info": youtube-dl updated successfully}')
        else:
            send_message('{"Error": "youtube-dl update failed", "stderr": "%s"}' % stderr.decode('utf-8'))
    except Exception as e:
        send_message('{"Error": "Exception during youtube-dl update", "exception": "%s"}' % str(e))
        wait(1)

def debug(self,func,input):
  try:
    func(input)
    return True
  except Exception as err:
    self.log("ERR %s" % err)
    return False


if True:
  class NativeMessagingWindow():
    def __init__(self, q, main):
      self.q = q
      self.main = main
      self.url = None
      self.deathtimer_t = None
      self.convertpath = None
      self.downloadpath = None
      self.convert = None
      self.format = None

    def start(self):
      self.log('{"Info": Loop initialized}')
      self.log('{"Info": current_thread: %s}' % threading.current_thread().ident)

      loop_is_working = True

      while loop_is_working == True:
        loop_is_working = self.processMessages()

        if loop_is_working != True:
            self.stop(loop_is_working)
            return

        if count_active_cmd_threads() == 0:
            self.startDeathtimer()


        time.sleep(0.1)

    def stop(self,loop_is_working):

        try:
            self.log('{"loop_is_working": %s}' % loop_is_working)
            self.exit() ##Da loop nicht mehr funktioniert harte programmbeendigung durch exit()
        except Exception as err:
            self.log('{"Err loop ist somehow broken and cannot be exit": %s}' % err)

    def processMessages(self): ##Loop

      while not self.q.empty():
        #send_message('{"info": "Queue Size: %s"}' % str(self.q.qsize()))
        message = self.q.get_nowait()

        ###ABBRUCHBEDINGUNG DER WHILE SCHLEIFE!!!!#####
        if message == None: ## exitWithLoop() setzt message == none
          self.log('{"Info": Message = Null/None, Aborting Programm}')
          return False

        #self.log(f"ThreadsCount: %s CMDThreads:{self.threads}" % threading.active_count())
        self.log("Recieved: %s" % message)

        #Wenn optionen nicht initialisert worden sind
        if json.dumps(message) == "{}":
            self.log('{"Info": Message = {}, Aborting Programm}')
            #Errorhandler###############################
            ########os.chdir('/')
            ########os.system(r'cmd echo ERROR 101. Please open the Sauger options once in your Browser. You can close this window now.' )
            ########os.chdir('/')
            #Errorhandler###############################
            self.exit()

        #self.log("CHECK %s" % self.url)
        if self.checkForUpdate(message):
            try:
                if startUpdater() == True:
                    self.exit()

            except Exception as err:
                self.log('{"Err: ": %s}' % err)
            return False

        if self.checkForPreferences(message):
            return True

        if self.checkForUrl(message):
          if self.downloadpath != None:
              self.debug(self.convertUrl,message)
              return True
          else:
              self.log("ERROR: Downloadpath is not declared")
              return False

      #self.log("THREADS: %s" % count_active_cmd_threads())
      return True

    def log(self, message):
        send_message(message)

    #{"format":"wav","convert":true,"downloadpath":"E:/RENDER OUTPUT","convertpath":"E:/Runterladungen!"}
    def checkForUpdate(self, message):
        message = json.dumps(message)
        if "invokeUpdate" in message:
            self.log("Update has been requested")
            return True
        else:
            return False


    def checkForPreferences(self, message):
      message = json.dumps(message)
      if "format" in message:
          self.log("PREFERENCES FOUND")

          pref_list = ['format','convert','downloadpath','convertpath']
          sliced_list = []

          message.replace('"','')

          for i,setting in enumerate(pref_list):
              setting = message.split(',')[i]
              sliced_list.append(setting)
              #self.log(setting)
              #self.log(message)

          #self.log(pref_list)
          for i,slice in enumerate(sliced_list):
              #self.log(slice)
              sliced_list[i] = slice.replace('"',"")
              sliced_list[i] = sliced_list[i].replace('{',"")
              sliced_list[i] = sliced_list[i].replace('}',"")

              sliced_list[i] = sliced_list[i].replace(pref_list[i],"")  #ersetzt die identifikatoren der parameter
              try:
                  sliced_list[i] = self.cut_unwanted_prefix(sliced_list[i]) #ersetzt ungewünschte prefixe vor
                  sliced_list[i] = sliced_list[i].replace("#","")
                  sliced_list[i] = self.cut_unwanted_prefix(sliced_list[i]) #den einstellungsparametern
                  sliced_list[i] = sliced_list[i].replace("#","")
                  sliced_list[i] = self.cut_unwanted_prefix(sliced_list[i]) #mit einer raute
                  sliced_list[i] = sliced_list[i].replace("#","")
              except Exception as err:
                  self.log('{"Err: ": %s}' % err)

              self.log(sliced_list[i])


          self.format = sliced_list[0]
          self.convert = sliced_list[1]
          self.downloadpath = sliced_list[2]
          self.convertpath = sliced_list[3]

          #self.log("PREFERENCES SLICED")
          return True

      #self.log("NO PREFERENCES FOUND")
      return False

    def cut_unwanted_prefix(self,slice):
        rebuild_slice = ""
        for n,char in enumerate(slice): #leerzeichen vorne entfernen
            #self.log(f"{n} {char}")
            if (n == 0) and (char == ":"): char = "#"
            if n == 0 and char == " ": char = "#"
            rebuild_slice+=char

        return rebuild_slice

    def checkForUrl(self, message):
      self.url = None
      #self.log("Check For URL %s" % message)
      #self.log("Type %s" % type(message)) -> dict
      message = json.dumps(message)
      #self.log("Check For URL %s" % message)
      #self.log("Type %s" % type(message)) -> string
      if "http" in message:
          frontCut = slicer(message,'http')
          #self.log("SplitFrontAway Url %s" % frontCut)
          completeCut = frontCut.split('"')[0]
          #self.log("SplitBackAway %s" % completeCut)
          self.log("URL FOUND")
          self.url = completeCut
          return True
      #self.log("NO URL FOUND")
      return False

    def convertUrl(self, message):
      try:
          self.log("Convert: %s" % self.url)
          cmd_host = threading.Thread(target=downloadFiles_host, args=(self.url,self.format,self.convert,self.downloadpath,self.convertpath))
          cmd_threads.append(cmd_host)
          cmd_host.deamon = True #WICHTIG!!!!! Wenn nur noch deamon = True threads offen sind werden diese sofort beendet
          cmd_host.start()
          self.log("Threads: %s" % cmd_threads)

      except Exception as err:
          self.log("ERR %s" % err)


    def startDeathtimer(self):

        if self.deathtimer_t == None:
            self.log("Initiating deathtimer because THREADS = %s" % count_active_cmd_threads())

            self.deathtimer_t = threading.Thread(target=self.deathtimer, args=())
            self.deathtimer_t.daemon = True
            self.deathtimer_t.start()

    ###Wird in thread aufgerufen...

    def deathtimer(self):
        for i in range(90):
            time.sleep(1)
            if i%10 == 0: send_message('{"Info": Deathtimer at second %s}' % i)
            if count_active_cmd_threads() >= 1:
                send_message('{"Info": Deathtimer got canceled at second %s}' % i)
                self.deathtimer_t = None
                return
        send_message('{"Info": Deathtimer at %s, killing Process now}' % i)

        #main_window = None
        try:
            self.exitWithLoop()
        except Exception as err:
            self.log('{"Err main.exit": %s}' % err)


    def debug(self,func,input):
      try:
        func(input)
        return True
      except Exception as err:
        self.log("ERR %s" % err)
        return False

    def exitWithLoop(self):
        self.q.put(None)

    def exit(self):
        self.log('{"Info": Exitting the following thread}')
        if is_main_thread():
            os.chdir('/')
            sys.exit(0)
        else:
            self.log("All threads %s" % count_all_threads())
            self.log('{"Info": Threadcontent: %s}' % cmd_threads)
            self.log("Main ID %s" % threading.get_ident())
            self.log('{"Info": ActiveCount: %s}' % count_active_cmd_threads())
            self.log('{"Info": All Threads: %s}' % get_all_threads_in_list())
            raise RuntimeError('Main thread couldnt be exit. Probably a Threading Error')


class Main():

  def __init__(self):

    self.q = queue.Queue()

    self.main_window = NativeMessagingWindow(self.q,self)
    self.main_thread = threading.Thread(target=read_thread_func, args=(self.q,))
    self.main_thread.daemon = True
    self.main_thread.start()

    self.main_window.start()


if __name__ == '__main__':

  try:
      cmd_threads = []
      Main()

  except Exception as err:

      send_message('{"Err": %s}' % err)
      traceback_string = traceback.format_exc()
      send_message('{"Traceback": %s}' % traceback_string)
      create_crashlog(traceback_string)
      traceback.print_exc()
      #print(err)
      x = input("An error occured! Press ENTER to exit...")
